<?php

namespace App\Command;

use App\Entity\Product;
use App\Service\XmlImportService;
use App\Service\OpenAIEmbeddingGenerator;
use App\Service\LLPhantVectorDBService;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

class ImportProductsCommand extends Command
{
    protected static $defaultName = 'app:import-products';

    private XmlImportService $xmlImportService;
    private OpenAIEmbeddingGenerator $embeddingGenerator;
    private LLPhantVectorDBService $vectorDBService;
    private ParameterBagInterface $params;

    public function __construct(
        XmlImportService $xmlImportService,
        OpenAIEmbeddingGenerator $embeddingGenerator,
        LLPhantVectorDBService $vectorDBService,
        ParameterBagInterface $params
    ) {
        parent::__construct();
        $this->xmlImportService = $xmlImportService;
        $this->embeddingGenerator = $embeddingGenerator; // Kept for now, though LLPhantVectorDBService uses its own instance
        $this->vectorDBService = $vectorDBService;
        $this->params = $params;
    }

    protected function configure(): void
    {
        $this
            ->setDescription('Imports products from an XML file and generates embeddings.')
            ->addArgument('xmlFilePath', InputArgument::OPTIONAL, 'Path to the XML file', 'data/fixtures/xml/sample_products.xml');
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);
        $xmlFilePathArg = $input->getArgument('xmlFilePath');
        $xmlFilePath = $this->params->get('kernel.project_dir') . '/' . $xmlFilePathArg;

        $io->title('Starting Product Import and Embedding Generation');
        $io->text("Loading XML file from: {$xmlFilePath}");

        try {
            $products = $this->xmlImportService->importFromFile($xmlFilePath);
            if (empty($products)) {
                $io->warning('No products found in the XML file.');
                return Command::SUCCESS;
            }

            $io->success(count($products) . ' products loaded from XML.');
            $io->progressStart(count($products));

            // Initialize collection (might be a no-op for InMemoryVectorStore)
            $this->vectorDBService->initializeCollection();
            $io->text('Vector DB collection initialized (if needed).');

            foreach ($products as $product) {
                /** @var Product $product */
                $io->text("Processing product ID: {$product->getId()} - {$product->getName()}");

                // 1. Insert the product (embedding generated by LLPhantVectorDBService via its OpenAIEmbeddingGenerator)
                $insertSuccess = $this->vectorDBService->insertProduct($product);
                if (!$insertSuccess) {
                    $io->warning("Failed to insert main product data for ID: {$product->getId()}");
                    // Continue to next product or handle error
                }

                // 2. Insert product features (embeddings generated by LLPhantVectorDBService)
                // The second argument (pre-computed embeddings) is currently ignored by LLPhantVectorDBService
                // as it's designed to use its internal embedder with the text from the Document.
                if (!empty($product->getFeatures())) {
                    $featureSuccess = $this->vectorDBService->insertProductFeatures($product, []);
                    if (!$featureSuccess) {
                        $io->warning("Failed to insert features for product ID: {$product->getId()}");
                    }
                }

                // 3. Insert product specifications (embeddings generated by LLPhantVectorDBService)
                if (!empty($product->getSpecifications())) {
                    $specSuccess = $this->vectorDBService->insertProductSpecifications($product, []);
                    if (!$specSuccess) {
                        $io->warning("Failed to insert specifications for product ID: {$product->getId()}");
                    }
                }

                $io->progressAdvance();
            }

            $io->progressFinish();
            $io->success('Product import and embedding generation completed.');

        } catch (\Exception $e) {
            $io->error('An error occurred: ' . $e->getMessage());
            $io->writeln($e->getTraceAsString()); // Optional: for more debug info
            return Command::FAILURE;
        }

        return Command::SUCCESS;
    }
}
